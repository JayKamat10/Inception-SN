{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Copy of Pavia University Inception","provenance":[{"file_id":"1HFQyHYAsoI5tRYJpRXatfsaa33s8Q1vQ","timestamp":1588745384361},{"file_id":"19q_ikGhPJognsPfrd31IupCNtRM8EDDx","timestamp":1588398754789}],"machine_shape":"hm","authorship_tag":"ABX9TyP5z3wB1c9OsfPpIOMs69gE"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"Wp2DdYRLQZmT","colab_type":"code","outputId":"434e2445-13dc-4b37-ba76-31fb2076bac9","executionInfo":{"status":"ok","timestamp":1588392011616,"user_tz":-330,"elapsed":13749,"user":{"displayName":"JAY KAMAT KAMAT","photoUrl":"","userId":"11823811184306854845"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["import keras\n","from keras.layers import Conv2D, Conv3D, MaxPool3D, MaxPool2D, concatenate, Flatten, Dense, Reshape, BatchNormalization\n","from keras.layers import Dropout, Input\n","from keras.models import Model\n","from keras.optimizers import Adam\n","from keras.callbacks import ModelCheckpoint\n","from keras.utils import np_utils\n","from keras.utils import plot_model\n","\n","\n","from sklearn.decomposition import PCA\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import confusion_matrix, accuracy_score, classification_report, cohen_kappa_score\n","\n","from operator import truediv\n","\n","from plotly.offline import init_notebook_mode\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import scipy.io as sio\n","import os\n","!pip install spectral\n","import spectral\n","\n","init_notebook_mode(connected=True)\n","%matplotlib inline"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: spectral in /usr/local/lib/python3.6/dist-packages (0.21)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from spectral) (1.18.3)\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["        <script type=\"text/javascript\">\n","        window.PlotlyConfig = {MathJaxConfig: 'local'};\n","        if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n","        if (typeof require !== 'undefined') {\n","        require.undef(\"plotly\");\n","        requirejs.config({\n","            paths: {\n","                'plotly': ['https://cdn.plot.ly/plotly-latest.min']\n","            }\n","        });\n","        require(['plotly'], function(Plotly) {\n","            window._Plotly = Plotly;\n","        });\n","        }\n","        </script>\n","        "]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"eQSjXlI8Qv6Y","colab_type":"code","colab":{}},"source":["data = sio.loadmat('/content/PaviaU.mat')['paviaU']\n","labels = sio.loadmat('/content/PaviaU_gt.mat')['paviaU_gt']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KobYfCZvQv8P","colab_type":"code","colab":{}},"source":["test_ratio = 0.7\n","windowSize = 25"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KckkTnUEQv_M","colab_type":"code","colab":{}},"source":["def TrainTestSplit(X, y, testRatio, randomState=345):\n","    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=testRatio, random_state=randomState,\n","                                                        stratify=y)\n","    return X_train, X_test, y_train, y_test"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"x73-56LVQwBN","colab_type":"code","colab":{}},"source":["def dim_reduce_PCA(X, numComponents):\n","    dim_reduce_X = np.reshape(X, (-1, X.shape[2]))\n","    pca = PCA(n_components=numComponents, whiten=True)\n","    dim_reduce_X = pca.fit_transform(dim_reduce_X)\n","    dim_reduce_X = np.reshape(dim_reduce_X, (X.shape[0],X.shape[1], numComponents))\n","    return dim_reduce_X, pca"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"umf4qrNBQwD8","colab_type":"code","colab":{}},"source":["def ZeroPadding(X, border_offset=2):\n","    ZeroPadding_X = np.zeros((X.shape[0] + 2 *(border_offset), X.shape[1] + 2*(border_offset), X.shape[2]))\n","    x_offset = border_offset\n","    y_offset = border_offset\n","    ZeroPadding_X[x_offset:X.shape[0] + x_offset, y_offset:X.shape[1] + y_offset, :] = X\n","    return ZeroPadding_X"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zouXKJgfQwGH","colab_type":"code","colab":{}},"source":["def PixelwiseInput(X, y, windowSize=5, removeZeroLabels = True):\n","    margin = int((windowSize - 1) / 2)\n","    ZeroPadding_X = ZeroPadding(X, border_offset=margin)\n","    # split patches\n","    patchesData = np.zeros((X.shape[0] * X.shape[1], windowSize, windowSize, X.shape[2]))\n","    patchesLabels = np.zeros((X.shape[0] * X.shape[1]))\n","    patchIndex = 0\n","    for r in range(margin, ZeroPadding_X.shape[0] - margin):\n","        for c in range(margin, ZeroPadding_X.shape[1] - margin):\n","            patch = ZeroPadding_X[r - margin:r + margin + 1, c - margin:c + margin + 1]   \n","            patchesData[patchIndex, :, :, :] = patch\n","            patchesLabels[patchIndex] = y[r-margin, c-margin]\n","            patchIndex = patchIndex + 1\n","    if removeZeroLabels:\n","        patchesData = patchesData[patchesLabels>0,:,:,:]\n","        patchesLabels = patchesLabels[patchesLabels>0]\n","        patchesLabels -= 1\n","    return patchesData, patchesLabels"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5otUAuAUQwJ2","colab_type":"code","colab":{}},"source":["X = data\n","y = labels"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gmU1OntSQwND","colab_type":"code","colab":{}},"source":["K=15\n","X,pca = dim_reduce_PCA(X,numComponents=K)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dxGc5TqVQwPO","colab_type":"code","colab":{}},"source":["X, y = PixelwiseInput(X, y, windowSize=windowSize)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1dqpKC14QwTp","colab_type":"code","colab":{}},"source":["Xtrain, Xtest, ytrain, ytest = TrainTestSplit(X, y, test_ratio)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"te10ylu2QwX8","colab_type":"code","colab":{}},"source":["Xtrain = Xtrain.reshape(-1, windowSize, windowSize, 15 , 1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rkuThuxyeE1r","colab_type":"code","colab":{}},"source":["ytrain = np_utils.to_categorical(ytrain)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sdorqBqNQwZt","colab_type":"code","colab":{}},"source":["S = windowSize\n","L = 15\n","output_units = 9"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aivhFvUWQxKi","colab_type":"code","colab":{}},"source":["def inception_module_3d(input_layer,\n","                     filters_1x1x1,\n","                     filters_3x3x3_reduce,\n","                     filters_3x3x3,\n","                     filters_3x3x5_reduce,\n","                     filters_3x3x5,\n","                     filters_pool_proj,\n","                     name=None):\n","    \n","    conv_1x1x1 = Conv3D(filters_1x1x1, (1, 1, 1), padding='same', activation='relu')(input_layer)\n","    \n","    conv_3x3x3 = Conv3D(filters_3x3x3_reduce, (1, 1, 1), padding='same', activation='relu')(input_layer)\n","    conv_3x3x3 = Conv3D(filters_3x3x3, (3, 3, 3), padding='same', activation='relu')(conv_3x3x3)\n","\n","    conv_3x3x5 = Conv3D(filters_3x3x5_reduce, (1, 1, 1), padding='same', activation='relu')(input_layer)\n","    conv_3x3x5 = Conv3D(filters_3x3x5, (3, 3, 5), padding='same', activation='relu')(conv_3x3x5)\n","\n","    pool_proj = MaxPool3D((3, 3, 3), strides=(1, 1, 1), padding='same')(input_layer)\n","    pool_proj = Conv3D(filters_pool_proj, (1, 1, 1), padding='same', activation='relu')(pool_proj)\n","\n","    output_3d = concatenate([conv_1x1x1, conv_3x3x3, conv_3x3x5, pool_proj], axis=4, name=name)\n","    \n","    return output_3d"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ywz9kTEoQxMY","colab_type":"code","colab":{}},"source":["def inception_module_2d(x,\n","                     filters_1x1,\n","                     filters_2x2_reduce,\n","                     filters_2x2,\n","                     filters_3x3_reduce,\n","                     filters_3x3,\n","                     filters_pool_proj,\n","                     name=None):\n","    \n","    conv_1x1 = Conv2D(filters_1x1, (1, 1), padding='same', activation='relu')(x)\n","    \n","    conv_2x2 = Conv2D(filters_2x2_reduce, (1, 1), padding='same', activation='relu')(x)\n","    conv_2x2 = Conv2D(filters_2x2, (2, 2), padding='same', activation='relu')(conv_2x2)\n","\n","    conv_3x3 = Conv2D(filters_3x3_reduce, (1, 1), padding='same', activation='relu')(x)\n","    conv_3x3 = Conv2D(filters_3x3, (3, 3), padding='same', activation='relu')(conv_3x3)\n","\n","    pool_proj = MaxPool2D((3, 3), strides=(1, 1), padding='same')(x)\n","    pool_proj = Conv2D(filters_pool_proj, (1, 1), padding='same', activation='relu')(pool_proj)\n","\n","    output = concatenate([conv_1x1, conv_2x2, conv_3x3, pool_proj], axis=3, name=name)\n","    \n","    return output"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_fx1Q9X0QxQB","colab_type":"code","colab":{}},"source":["## Input layer\n","input_layer = Input((S, S, L, 1))\n","\n","\n","## Inception layers (for 3D convolution)\n","inception_1 = inception_module_3d(input_layer,32,48,64,8,16,16)\n","inception_2 = inception_module_3d(inception_1,32,48,64,8,16,16)\n","\n","inception_2_shape = inception_2._keras_shape\n","\n","#Inception 2D convolution\n","reshape_1 = Reshape((inception_2_shape[1], inception_2_shape[2], inception_2_shape[3]*inception_2_shape[4]))(inception_2)\n","conv_2 = inception_module_2d(reshape_1,64,64,96,16,48,32)\n","\n","flatten_1 = Flatten()(conv_2)\n","\n","## Dense FC Layer\n","dense_1 = Dense(units=256, activation='relu')(flatten_1)\n","dense_1 = Dropout(0.4)(dense_1)\n","dense_2 = Dense(units=128, activation='relu')(dense_1)\n","dense_2 = Dropout(0.4)(dense_2)\n","output_layer = Dense(units=9, activation='softmax')(dense_2)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jgs7ekHmQwRr","colab_type":"code","outputId":"dd23c8c6-4528-4959-b5a5-e35211fd3b61","executionInfo":{"status":"ok","timestamp":1588392031393,"user_tz":-330,"elapsed":33181,"user":{"displayName":"JAY KAMAT KAMAT","photoUrl":"","userId":"11823811184306854845"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# define the model with input layer and output layer\n","model = Model(inputs=input_layer, outputs=output_layer)\n","model.summary()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Model: \"model_4\"\n","__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","input_4 (InputLayer)            (None, 25, 25, 15, 1 0                                            \n","__________________________________________________________________________________________________\n","conv3d_38 (Conv3D)              (None, 25, 25, 15, 4 96          input_4[0][0]                    \n","__________________________________________________________________________________________________\n","conv3d_40 (Conv3D)              (None, 25, 25, 15, 8 16          input_4[0][0]                    \n","__________________________________________________________________________________________________\n","max_pooling3d_7 (MaxPooling3D)  (None, 25, 25, 15, 1 0           input_4[0][0]                    \n","__________________________________________________________________________________________________\n","conv3d_37 (Conv3D)              (None, 25, 25, 15, 3 64          input_4[0][0]                    \n","__________________________________________________________________________________________________\n","conv3d_39 (Conv3D)              (None, 25, 25, 15, 6 83008       conv3d_38[0][0]                  \n","__________________________________________________________________________________________________\n","conv3d_41 (Conv3D)              (None, 25, 25, 15, 1 5776        conv3d_40[0][0]                  \n","__________________________________________________________________________________________________\n","conv3d_42 (Conv3D)              (None, 25, 25, 15, 1 32          max_pooling3d_7[0][0]            \n","__________________________________________________________________________________________________\n","concatenate_10 (Concatenate)    (None, 25, 25, 15, 1 0           conv3d_37[0][0]                  \n","                                                                 conv3d_39[0][0]                  \n","                                                                 conv3d_41[0][0]                  \n","                                                                 conv3d_42[0][0]                  \n","__________________________________________________________________________________________________\n","conv3d_44 (Conv3D)              (None, 25, 25, 15, 4 6192        concatenate_10[0][0]             \n","__________________________________________________________________________________________________\n","conv3d_46 (Conv3D)              (None, 25, 25, 15, 8 1032        concatenate_10[0][0]             \n","__________________________________________________________________________________________________\n","max_pooling3d_8 (MaxPooling3D)  (None, 25, 25, 15, 1 0           concatenate_10[0][0]             \n","__________________________________________________________________________________________________\n","conv3d_43 (Conv3D)              (None, 25, 25, 15, 3 4128        concatenate_10[0][0]             \n","__________________________________________________________________________________________________\n","conv3d_45 (Conv3D)              (None, 25, 25, 15, 6 83008       conv3d_44[0][0]                  \n","__________________________________________________________________________________________________\n","conv3d_47 (Conv3D)              (None, 25, 25, 15, 1 5776        conv3d_46[0][0]                  \n","__________________________________________________________________________________________________\n","conv3d_48 (Conv3D)              (None, 25, 25, 15, 1 2064        max_pooling3d_8[0][0]            \n","__________________________________________________________________________________________________\n","concatenate_11 (Concatenate)    (None, 25, 25, 15, 1 0           conv3d_43[0][0]                  \n","                                                                 conv3d_45[0][0]                  \n","                                                                 conv3d_47[0][0]                  \n","                                                                 conv3d_48[0][0]                  \n","__________________________________________________________________________________________________\n","reshape_4 (Reshape)             (None, 25, 25, 1920) 0           concatenate_11[0][0]             \n","__________________________________________________________________________________________________\n","conv2d_20 (Conv2D)              (None, 25, 25, 64)   122944      reshape_4[0][0]                  \n","__________________________________________________________________________________________________\n","conv2d_22 (Conv2D)              (None, 25, 25, 16)   30736       reshape_4[0][0]                  \n","__________________________________________________________________________________________________\n","max_pooling2d_4 (MaxPooling2D)  (None, 25, 25, 1920) 0           reshape_4[0][0]                  \n","__________________________________________________________________________________________________\n","conv2d_19 (Conv2D)              (None, 25, 25, 64)   122944      reshape_4[0][0]                  \n","__________________________________________________________________________________________________\n","conv2d_21 (Conv2D)              (None, 25, 25, 96)   24672       conv2d_20[0][0]                  \n","__________________________________________________________________________________________________\n","conv2d_23 (Conv2D)              (None, 25, 25, 48)   6960        conv2d_22[0][0]                  \n","__________________________________________________________________________________________________\n","conv2d_24 (Conv2D)              (None, 25, 25, 32)   61472       max_pooling2d_4[0][0]            \n","__________________________________________________________________________________________________\n","concatenate_12 (Concatenate)    (None, 25, 25, 240)  0           conv2d_19[0][0]                  \n","                                                                 conv2d_21[0][0]                  \n","                                                                 conv2d_23[0][0]                  \n","                                                                 conv2d_24[0][0]                  \n","__________________________________________________________________________________________________\n","flatten_4 (Flatten)             (None, 150000)       0           concatenate_12[0][0]             \n","__________________________________________________________________________________________________\n","dense_10 (Dense)                (None, 256)          38400256    flatten_4[0][0]                  \n","__________________________________________________________________________________________________\n","dropout_7 (Dropout)             (None, 256)          0           dense_10[0][0]                   \n","__________________________________________________________________________________________________\n","dense_11 (Dense)                (None, 128)          32896       dropout_7[0][0]                  \n","__________________________________________________________________________________________________\n","dropout_8 (Dropout)             (None, 128)          0           dense_11[0][0]                   \n","__________________________________________________________________________________________________\n","dense_12 (Dense)                (None, 9)            1161        dropout_8[0][0]                  \n","==================================================================================================\n","Total params: 38,995,233\n","Trainable params: 38,995,233\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Mq0RHd-SRk8j","colab_type":"code","colab":{}},"source":["# compiling the model\n","adam = Adam(lr=0.001, decay=1e-06)\n","model.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mkwOIqY5Rk_m","colab_type":"code","colab":{}},"source":["# checkpoint\n","filepath = \"/content/best-modelpavia.hdf5\"\n","checkpoint = ModelCheckpoint(filepath, monitor='acc', verbose=1, save_best_only=True, mode='max')\n","callbacks_list = [checkpoint]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LXlotPeoRlCu","colab_type":"code","outputId":"d0a27b6f-f4f7-40f6-b749-ca212612e147","executionInfo":{"status":"ok","timestamp":1588394630561,"user_tz":-330,"elapsed":2632282,"user":{"displayName":"JAY KAMAT KAMAT","photoUrl":"","userId":"11823811184306854845"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["history = model.fit(x=Xtrain, y=ytrain, batch_size=64, epochs=50, callbacks=callbacks_list)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Epoch 1/50\n","12832/12832 [==============================] - 53s 4ms/step - loss: 0.4854 - accuracy: 0.8625\n","Epoch 2/50\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/keras/callbacks/callbacks.py:707: RuntimeWarning:\n","\n","Can save best model only with acc available, skipping.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["12832/12832 [==============================] - 52s 4ms/step - loss: 0.0398 - accuracy: 0.9890\n","Epoch 3/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0300 - accuracy: 0.9922\n","Epoch 4/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0384 - accuracy: 0.9913\n","Epoch 5/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0170 - accuracy: 0.9952\n","Epoch 6/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0047 - accuracy: 0.9985\n","Epoch 7/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0086 - accuracy: 0.9978\n","Epoch 8/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0102 - accuracy: 0.9975\n","Epoch 9/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0147 - accuracy: 0.9964\n","Epoch 10/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0207 - accuracy: 0.9959\n","Epoch 11/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0120 - accuracy: 0.9973\n","Epoch 12/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0065 - accuracy: 0.9982\n","Epoch 13/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0037 - accuracy: 0.9991\n","Epoch 14/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0017 - accuracy: 0.9996\n","Epoch 15/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0011 - accuracy: 0.9998\n","Epoch 16/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0031 - accuracy: 0.9995\n","Epoch 17/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0137 - accuracy: 0.9960\n","Epoch 18/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0179 - accuracy: 0.9952\n","Epoch 19/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0174 - accuracy: 0.9968\n","Epoch 20/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0131 - accuracy: 0.9970\n","Epoch 21/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0207 - accuracy: 0.9969\n","Epoch 22/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0027 - accuracy: 0.9993\n","Epoch 23/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0020 - accuracy: 0.9995\n","Epoch 24/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0013 - accuracy: 0.9998\n","Epoch 25/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0031 - accuracy: 0.9991\n","Epoch 26/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0031 - accuracy: 0.9993\n","Epoch 27/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0047 - accuracy: 0.9995\n","Epoch 28/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 6.8359e-04 - accuracy: 0.9998\n","Epoch 29/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 4.9517e-04 - accuracy: 0.9998\n","Epoch 30/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 4.5543e-04 - accuracy: 0.9999\n","Epoch 31/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0012 - accuracy: 0.9998\n","Epoch 32/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0039 - accuracy: 0.9992\n","Epoch 33/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0215 - accuracy: 0.9968\n","Epoch 34/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0088 - accuracy: 0.9984\n","Epoch 35/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0051 - accuracy: 0.9993\n","Epoch 36/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0023 - accuracy: 0.9994\n","Epoch 37/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0047 - accuracy: 0.9992\n","Epoch 38/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0010 - accuracy: 0.9998\n","Epoch 39/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0013 - accuracy: 0.9998\n","Epoch 40/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 3.7499e-04 - accuracy: 0.9998\n","Epoch 41/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0082 - accuracy: 0.9991\n","Epoch 42/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 4.2475e-04 - accuracy: 0.9998\n","Epoch 43/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0029 - accuracy: 0.9993\n","Epoch 44/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0297 - accuracy: 0.9964\n","Epoch 45/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0182 - accuracy: 0.9974\n","Epoch 46/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0146 - accuracy: 0.9981\n","Epoch 47/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0067 - accuracy: 0.9991\n","Epoch 48/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 5.9244e-04 - accuracy: 0.9998\n","Epoch 49/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 7.3393e-04 - accuracy: 0.9998\n","Epoch 50/50\n","12832/12832 [==============================] - 52s 4ms/step - loss: 0.0015 - accuracy: 0.9996\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Kre0Dg-7RlFE","colab_type":"code","colab":{}},"source":["model.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"D_AdYP19RlHt","colab_type":"code","outputId":"4aeb1217-00b9-432d-fa2d-577a53265fd1","executionInfo":{"status":"ok","timestamp":1588394631078,"user_tz":-330,"elapsed":2632749,"user":{"displayName":"JAY KAMAT KAMAT","photoUrl":"","userId":"11823811184306854845"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["Xtest = Xtest.reshape(-1, windowSize, windowSize, K, 1)\n","Xtest.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(29944, 25, 25, 15, 1)"]},"metadata":{"tags":[]},"execution_count":86}]},{"cell_type":"code","metadata":{"id":"1hj1NueqRlLB","colab_type":"code","outputId":"fcaf5d5c-d2b2-497e-9087-7d40f88eec19","executionInfo":{"status":"ok","timestamp":1588394631079,"user_tz":-330,"elapsed":2632726,"user":{"displayName":"JAY KAMAT KAMAT","photoUrl":"","userId":"11823811184306854845"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["ytest = np_utils.to_categorical(ytest)\n","ytest.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(29944, 9)"]},"metadata":{"tags":[]},"execution_count":87}]},{"cell_type":"code","metadata":{"id":"4IG3ABxQRlN-","colab_type":"code","outputId":"93d142ad-f31b-48fa-f2c4-3ad467611226","executionInfo":{"status":"ok","timestamp":1588394668653,"user_tz":-330,"elapsed":2670261,"user":{"displayName":"JAY KAMAT KAMAT","photoUrl":"","userId":"11823811184306854845"}},"colab":{"base_uri":"https://localhost:8080/","height":289}},"source":["Y_pred_test = model.predict(Xtest)\n","y_pred_test = np.argmax(Y_pred_test, axis=1)\n","\n","classification = classification_report(np.argmax(ytest, axis=1), y_pred_test)\n","print(classification)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00      4642\n","           1       1.00      1.00      1.00     13055\n","           2       1.00      1.00      1.00      1469\n","           3       1.00      1.00      1.00      2145\n","           4       1.00      1.00      1.00       942\n","           5       1.00      1.00      1.00      3520\n","           6       1.00      1.00      1.00       931\n","           7       1.00      1.00      1.00      2577\n","           8       1.00      1.00      1.00       663\n","\n","    accuracy                           1.00     29944\n","   macro avg       1.00      1.00      1.00     29944\n","weighted avg       1.00      1.00      1.00     29944\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jLJjd8RtRlQ9","colab_type":"code","colab":{}},"source":["def AA_andEachClassAccuracy(confusion_matrix):\n","    counter = confusion_matrix.shape[0]\n","    list_diag = np.diag(confusion_matrix)\n","    list_raw_sum = np.sum(confusion_matrix, axis=1)\n","    each_acc = np.nan_to_num(truediv(list_diag, list_raw_sum))\n","    average_acc = np.mean(each_acc)\n","    return each_acc, average_acc"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eOYccJzcQwI6","colab_type":"code","colab":{}},"source":["def reports (X_test,y_test):\n","    #start = time.time()\n","    Y_pred = model.predict(X_test)\n","    y_pred = np.argmax(Y_pred, axis=1)\n","    #end = time.time()\n","    #print(end - start)\n","   \n","    target_names = ['Asphalt','Meadows','Gravel','Trees', 'Painted metal sheets','Bare Soil','Bitumen',\n","                        'Self-Blocking Bricks','Shadows']\n","    \n","    classification = classification_report(np.argmax(y_test, axis=1), y_pred, target_names=target_names)\n","    oa = accuracy_score(np.argmax(y_test, axis=1), y_pred)\n","    confusion = confusion_matrix(np.argmax(y_test, axis=1), y_pred)\n","    each_acc, aa = AA_andEachClassAccuracy(confusion)\n","    kappa = cohen_kappa_score(np.argmax(y_test, axis=1), y_pred)\n","    score = model.evaluate(X_test, y_test, batch_size=32)\n","    Test_Loss =  score[0]*100\n","    Test_accuracy = score[1]*100\n","    \n","    return classification, confusion, Test_Loss, Test_accuracy, oa*100, each_acc*100, aa*100, kappa*100"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9k9QH7oDR5Me","colab_type":"code","outputId":"b72ad057-ff14-473e-d5f6-4d559d72f89e","executionInfo":{"status":"ok","timestamp":1588397858485,"user_tz":-330,"elapsed":79390,"user":{"displayName":"JAY KAMAT KAMAT","photoUrl":"","userId":"11823811184306854845"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["classification, confusion, Test_loss, Test_accuracy, oa, each_acc, aa, kappa = reports(Xtest,ytest)\n","classification = str(classification)\n","confusion = str(confusion)\n","file_name = \"classification_report_pavia.txt\"\n","\n","with open(file_name, 'w') as x_file:\n","    x_file.write('{} Test loss (%)'.format(Test_loss))\n","    x_file.write('\\n')\n","    x_file.write('{} Test accuracy (%)'.format(Test_accuracy))\n","    x_file.write('\\n')\n","    x_file.write('\\n')\n","    x_file.write('{} Kappa accuracy (%)'.format(kappa))\n","    x_file.write('\\n')\n","    x_file.write('{} Overall accuracy (%)'.format(oa))\n","    x_file.write('\\n')\n","    x_file.write('{} Average accuracy (%)'.format(aa))\n","    x_file.write('\\n')\n","    x_file.write('\\n')\n","    x_file.write('{}'.format(classification))\n","    x_file.write('\\n')\n","    x_file.write('{}'.format(confusion))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["29944/29944 [==============================] - 39s 1ms/step\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wB8C-PJFR5j0","colab_type":"code","colab":{}},"source":["\n","def Patch(data,height_index,width_index):\n","    height_slice = slice(height_index, height_index+PATCH_SIZE)\n","    width_slice = slice(width_index, width_index+PATCH_SIZE)\n","    patch = data[height_slice, width_slice, :]\n","    \n","    return patch\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NbjAnnXhR5mu","colab_type":"code","colab":{}},"source":["data = sio.loadmat('/content/PaviaU.mat')['paviaU']\n","labels = sio.loadmat('/content/PaviaU_gt.mat')['paviaU_gt']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3SBx4sLPR5pR","colab_type":"code","colab":{}},"source":["X = sio.loadmat('/content/PaviaU.mat')['paviaU']\n","y = sio.loadmat('/content/PaviaU_gt.mat')['paviaU_gt']\n","\n","height = y.shape[0]\n","width = y.shape[1]\n","PATCH_SIZE = windowSize\n","numComponents = K"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wbYCjeA-SaEs","colab_type":"code","colab":{}},"source":["X,pca = dim_reduce_PCA(X, numComponents=numComponents)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"F5Cmuno8SaHr","colab_type":"code","colab":{}},"source":["\n","X = ZeroPadding(X, PATCH_SIZE//2)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ylj2v7CwSaKt","colab_type":"code","colab":{}},"source":["# calculate the predicted image\n","outputs = np.zeros((height,width))\n","for i in range(height):\n","    for j in range(width):\n","        target = int(y[i,j])\n","        if target == 0 :\n","            continue\n","        else :\n","            image_patch=Patch(X,i,j)\n","            X_test_image = image_patch.reshape(1,image_patch.shape[0],image_patch.shape[1], image_patch.shape[2], 1).astype('float32')                                   \n","            prediction = (model.predict(X_test_image))\n","            prediction = np.argmax(prediction, axis=1)\n","            outputs[i][j] = prediction+1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9-dKSZrhSaNK","colab_type":"code","outputId":"afc29cf9-4344-4b85-a62a-656b0ff3bddc","executionInfo":{"status":"ok","timestamp":1588398740349,"user_tz":-330,"elapsed":2366,"user":{"displayName":"JAY KAMAT KAMAT","photoUrl":"","userId":"11823811184306854845"}},"colab":{"base_uri":"https://localhost:8080/","height":432}},"source":["ground_truth = spectral.imshow(classes = y,figsize =(7,7))"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 504x504 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"07uPgSc26EDs","colab_type":"code","outputId":"67883e66-cf7e-40e5-c92c-b42348ddafb2","executionInfo":{"status":"ok","timestamp":1588398742836,"user_tz":-330,"elapsed":2762,"user":{"displayName":"JAY KAMAT KAMAT","photoUrl":"","userId":"11823811184306854845"}},"colab":{"base_uri":"https://localhost:8080/","height":432}},"source":["predict_image = spectral.imshow(classes = outputs.astype(int),figsize =(7,7))"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 504x504 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}